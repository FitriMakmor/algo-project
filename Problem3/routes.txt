ROUTE 1
for h in range (len(potential_city)-1):
    while city_check < len(potential_city):
        if city_check != city_b and econ[potential_city[city_b]]+.02 < econ[potential_city[city_check]] and city_distance[city_c][country.index(potential_city[city_b])]*1.4 >= city_distance[city_c][country.index(potential_city[city_check])]:
            city_b = city_check
            city_check = -1
        city_check += 1
    city_c = country.index(potential_city[city_b])
    new_route.append(potential_city.pop(city_b))
    city_b = 0
    city_check = 1
new_route.append(potential_city.pop(0))

ROUTE BO
1)
for h in range (len(potential_city)-1):
    while city_check < len(potential_city):
        if city_check != city_b and econneg[potential_city[city_b]] > econneg[potential_city[city_check]]+0.1 and city_distance[city_c][country.index(potential_city[city_b]) >= city_distance[city_c][country.index(potential_city[city_check])]] + 800:
            city_b = city_check
            city_check = -1
        city_check += 1
    city_c = country.index(potential_city[city_b])
    new_route.append(potential_city.pop(city_b))
    city_b = 0
    city_check = 1
new_route.append(potential_city.pop(0))
2)
for h in range (len(potential_city)-1):
    while city_check < len(potential_city):
        if city_check != city_b and econneg[potential_city[city_b]] < econneg[potential_city[city_check]] and econneg[potential_city[city_check]] <0.6 and city_distance[city_c][country.index(potential_city[city_b]) >= city_distance[city_c][country.index(potential_city[city_check])]]+1000:
            city_b = city_check
            city_check = -1
        city_check += 1
    city_c = country.index(potential_city[city_b])
    new_route.append(potential_city.pop(city_b))
    city_b = 0
    city_check = 1
new_route.append(potential_city.pop(0))